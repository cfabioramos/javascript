//1o CASO
var regExp = /9999-9999/;
console.log(regExp.exec('9999-9999'));
var regExp2 = new RegExp("9999-9999");
console.log(regExp.test('9999-9999'));
//2o CASO
var regExp = /\(48\) 9999-9999/;
console.log(regExp.test('(48) 9999-9999'));
//3o CASO
var regExp = /\(48\) 9999-9999/;
console.log(regExp.exec('O telefone é: (48) 9999-9999.'));
//4o CASO
var regExp = /^\(48\) 9999-9999$/;
console.log('4o caso: ' + regExp.test('(48) 9999-9999'));
console.log('4o.1 caso: ' + regExp.test('(48) 9999-9999.'));
console.log('4o.2 caso: ' + regExp.test('.(48) 9999-9999'));
//5o CASO: [0-9] Grupo
var regExp = /^\([0-9][0-9]\) [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$/;
console.log('5o caso: ' + regExp.test('(48) 9999-9999'));
//6o CASO
var regExp = /^\([0-9]{2}\) [0-9]{4,5}-[0-9]{4}$/;
console.log('6o caso: ' + regExp.test('(48) 9999-9999'));
console.log('6o.1 caso: ' + regExp.test('(48) 98799-9999'));
console.log('6o.2 caso: ' + regExp.test('(48) 198799-9999'));
//7o CASO: ? (zero ou um), * (zero ou mais), + (um ou mais)
var regExp = /^\([0-9]{2}\) [0-9]{4,5}-?[0-9]{4}$/;
console.log('7o caso: ' + regExp.test('(48) 9999-9999'));
console.log('7o.0 caso: ' + regExp.test('(48) 99999999'));
console.log('7o.1 caso: ' + regExp.test('(48) 987999999'));
console.log('7o.2 caso: ' + regExp.test('(48) 198799-9999'));
//8o CASO: () Conjunto
var regExp = /<table><tr>(<td>\([0-9]{2}\) [0-9]{4,5}-?[0-9]{4}<\/td>)+<\/tr><\/table>/;
var telefone = "<table><tr><td>(80) 999778899</td><td>(90) 99897-8877</td><td>(70) 98767-9999</td></tr></table>";
console.log(regExp.exec(telefone));
//9o CASO: *
var regExp = /<table><tr>(<td>\([0-9]{2}\) [0-9]{4,5}-?[0-9]{4}<\/td>)*<\/tr><\/table>/;
var telefone = "<table><tr></tr></table>";
console.log("9o caso: " + regExp.test(telefone));
var telefone2 = "<table><tr><td>(80) 999778899</td></tr></table>";
console.log("9o.1 caso: " + regExp.test(telefone));
//10o CASO: Metacaracteres
/*
. - qualquer caractere
\w - o conjunto [a-zA-Z0-9_]
\W - o conjunto [^a-zA-Z0-9_]
\d - o conjunto [0-9]
\D - o conjunto [^0-9]
\s - um espaço em branco
\S - um não espaço em branco
\n - uma quebra de linha
\t - um tab
*/
var regExp = /<table><tr>(<td>\(\d{2}\)\s\d{4,5}-?\d{4}<\/td>)*<\/tr><\/table>/;
var telefone = "<table><tr><td>(80) 999778899</td><td>(90) 99897-8877</td><td>(70) 98767-9999</td></tr></table>";
console.log("10o caso: " + regExp.test(telefone));
//11o CASO: String API - Extrair o telefone de dentro das linhas.
/*
match - Executa uma busca na String e retorna um array contendo os dados encontrados, ou null.
split - Divide a String com base em uma outra String fixa ou expressão regular.
replace - Substitui partes da String com base em uma outra String fixa ou expressão regular.
*/
var regExp = /\(\d{2}\)\s\d{4,5}-?\d{4}/;
var telefone = "<table><tr><td>(80) 999778899</td><td>(90) 99897-8877</td><td>(70) 98767-9999</td></tr></table>";
console.log('11o Caso: ');
console.log(telefone.match(regExp));
//12o CASO: Modificadores
/*
i - Case-insensitive matching
g - Global Matching
m - Multiline matching
*/
var regExp = /\(\d{2}\)\s\d{4,5}-?\d{4}/gm;
var telefone = "<table><tr><td>(80) 999778899</td><td>(90) 99897-8877</td><td>(70) 98767-9999</td></tr></table>";
telefone += "açlksdnaslçdnaçdna oiia c(90) 91234-1243";
console.log('12o Caso: ');
console.log(telefone.match(regExp));
/*
MAIS INFORMAÇÕES EM:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions
*/